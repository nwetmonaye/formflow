import 'package:flutter/material.dart';
import 'package:formflow/constants/style.dart';
import 'package:formflow/models/form_model.dart' as form_model;
import 'package:formflow/services/firebase_service.dart';
import 'package:formflow/models/submission_model.dart';

class FormSubmissionScreen extends StatefulWidget {
  final String formId;

  const FormSubmissionScreen({
    super.key,
    required this.formId,
  });

  @override
  State<FormSubmissionScreen> createState() => _FormSubmissionScreenState();
}

class _FormSubmissionScreenState extends State<FormSubmissionScreen> {
  form_model.FormModel? form;
  bool isLoading = true;
  bool isError = false;
  String errorMessage = '';
  final Map<String, dynamic> _responses = {};
  final _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _loadForm();
  }

  Future<void> _loadForm() async {
    try {
      final loadedForm = await FirebaseService.getForm(widget.formId);
      if (loadedForm != null) {
        setState(() {
          form = loadedForm;
          isLoading = false;
        });
      } else {
        setState(() {
          isError = true;
          errorMessage = 'Form not found';
          isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        isError = true;
        errorMessage = 'Error loading form: $e';
        isLoading = false;
      });
    }
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      // Create submission
      final submission = SubmissionModel(
        formId: widget.formId,
        submissionId: '', // Will be generated by Firestore
        data: _responses,
        status: form!.requiresApproval ? 'pending' : 'approved',
        createdAt: DateTime.now(),
        submitterName: _responses['submitterName'] ?? 'Anonymous',
        submitterEmail: _responses['submitterEmail'] ?? '',
        reviewedAt: null,
        reviewedBy: null,
      );

      await FirebaseService.createSubmission(submission);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Form submitted successfully!'),
          backgroundColor: Colors.green,
        ),
      );

      // Navigate back
      Navigator.of(context).pop();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error submitting form: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return Scaffold(
        backgroundColor: KStyle.cBgColor,
        body: const Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    if (isError) {
      return Scaffold(
        backgroundColor: KStyle.cBgColor,
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.error_outline,
                size: 64,
                color: KStyle.cDBRedColor,
              ),
              const SizedBox(height: 16),
              Text(
                'Form Not Found',
                style: KStyle.heading2TextStyle.copyWith(
                  color: KStyle.cBlackColor,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                errorMessage,
                style: KStyle.labelMdRegularTextStyle.copyWith(
                  color: KStyle.c72GreyColor,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(),
                style: ElevatedButton.styleFrom(
                  backgroundColor: KStyle.cPrimaryColor,
                  foregroundColor: KStyle.cWhiteColor,
                ),
                child: const Text('Go Back'),
              ),
            ],
          ),
        ),
      );
    }

    if (form == null) {
      return Scaffold(
        backgroundColor: KStyle.cBgColor,
        body: const Center(
          child: Text('Form not found'),
        ),
      );
    }

    return Scaffold(
      backgroundColor: KStyle.cBgColor,
      appBar: AppBar(
        backgroundColor: KStyle.cWhiteColor,
        elevation: 0,
        title: Text(
          form!.title,
          style: KStyle.heading2TextStyle.copyWith(
            color: KStyle.cBlackColor,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back,
            color: KStyle.cBlackColor,
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Form Header
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: KStyle.cWhiteColor,
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.08),
                    blurRadius: 16,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    form!.title,
                    style: KStyle.heading2TextStyle.copyWith(
                      color: KStyle.cBlackColor,
                      fontSize: 24,
                    ),
                  ),
                  if (form!.description != null &&
                      form!.description!.isNotEmpty) ...[
                    const SizedBox(height: 8),
                    Text(
                      form!.description!,
                      style: KStyle.labelMdRegularTextStyle.copyWith(
                        color: KStyle.c72GreyColor,
                      ),
                    ),
                  ],
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 6,
                        ),
                        decoration: BoxDecoration(
                          color: form!.status == 'active'
                              ? KStyle.cE8GreenColor
                              : KStyle.cF4GreyColor,
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          form!.status == 'active' ? 'Live' : 'Draft',
                          style: KStyle.labelSmRegularTextStyle.copyWith(
                            color: form!.status == 'active'
                                ? KStyle.c25GreenColor
                                : KStyle.c72GreyColor,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Form Fields
            if (form!.fields.isNotEmpty) ...[
              Text(
                'Form Questions',
                style: KStyle.heading3TextStyle.copyWith(
                  color: KStyle.cBlackColor,
                ),
              ),
              const SizedBox(height: 16),
              Form(
                key: _formKey,
                child: Column(
                  children: form!.fields
                      .map((field) => _buildFormField(field))
                      .toList(),
                ),
              ),
            ] else ...[
              Center(
                child: Column(
                  children: [
                    Icon(
                      Icons.description_outlined,
                      size: 64,
                      color: KStyle.c72GreyColor,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'No questions added yet',
                      style: KStyle.heading3TextStyle.copyWith(
                        color: KStyle.c72GreyColor,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'This form is still being set up',
                      style: KStyle.labelMdRegularTextStyle.copyWith(
                        color: KStyle.c72GreyColor,
                      ),
                    ),
                  ],
                ),
              ),
            ],

            const SizedBox(height: 32),

            // Submit Button
            if (form!.status == 'active') ...[
              SizedBox(
                width: double.infinity,
                height: 48,
                child: ElevatedButton(
                  onPressed: _submitForm,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: KStyle.cPrimaryColor,
                    foregroundColor: KStyle.cWhiteColor,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    elevation: 0,
                  ),
                  child: Text(
                    'Submit Form',
                    style: KStyle.labelMdBoldTextStyle.copyWith(
                      color: KStyle.cWhiteColor,
                    ),
                  ),
                ),
              ),
            ] else ...[
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: KStyle.cF4GreyColor,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: KStyle.cE3GreyColor),
                ),
                child: Text(
                  'This form is not currently accepting submissions',
                  style: KStyle.labelMdRegularTextStyle.copyWith(
                    color: KStyle.c72GreyColor,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildFormField(form_model.FormField field) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: KStyle.cWhiteColor,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Expanded(
                child: Text(
                  field.label,
                  style: KStyle.labelMdBoldTextStyle.copyWith(
                    color: KStyle.cBlackColor,
                  ),
                ),
              ),
              if (field.required)
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 4,
                  ),
                  decoration: BoxDecoration(
                    color: KStyle.cDBRedColor,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    'Required',
                    style: KStyle.labelXsRegularTextStyle.copyWith(
                      color: KStyle.cWhiteColor,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            'Type: ${field.type}',
            style: KStyle.labelSmRegularTextStyle.copyWith(
              color: KStyle.c72GreyColor,
            ),
          ),
          const SizedBox(height: 16),
          _buildFieldInput(field),
        ],
      ),
    );
  }

  Widget _buildFieldInput(form_model.FormField field) {
    switch (field.type) {
      case 'text':
        return TextFormField(
          decoration: InputDecoration(
            hintText: field.placeholder ?? 'Enter your answer',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                color: KStyle.cPrimaryColor,
                width: 2,
              ),
            ),
          ),
          onChanged: (value) {
            _responses[field.id] = value;
          },
          validator: (value) {
            if (field.required && (value == null || value.isEmpty)) {
              return 'This field is required';
            }
            return null;
          },
        );

      case 'number':
        return TextFormField(
          keyboardType: TextInputType.number,
          decoration: InputDecoration(
            hintText: field.placeholder ?? 'Enter a number',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                color: KStyle.cPrimaryColor,
                width: 2,
              ),
            ),
          ),
          onChanged: (value) {
            _responses[field.id] = double.tryParse(value);
          },
          validator: (value) {
            if (field.required && (value == null || value.isEmpty)) {
              return 'This field is required';
            }
            return null;
          },
        );

      case 'date':
        return TextFormField(
          readOnly: true,
          decoration: InputDecoration(
            hintText: field.placeholder ?? 'Select a date',
            suffixIcon: Icon(
              Icons.calendar_today,
              color: KStyle.c72GreyColor,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                color: KStyle.cPrimaryColor,
                width: 2,
              ),
            ),
          ),
          onTap: () async {
            final date = await showDatePicker(
              context: context,
              initialDate: DateTime.now(),
              firstDate: DateTime(1900),
              lastDate: DateTime(2100),
            );
            if (date != null) {
              _responses[field.id] = date;
            }
          },
          validator: (value) {
            if (field.required && (value == null || value.isEmpty)) {
              return 'This field is required';
            }
            return null;
          },
        );

      case 'multiple_choice':
        if (field.options != null && field.options!.isNotEmpty) {
          return Column(
            children: field.options!
                .map((option) => RadioListTile<String>(
                      title: Text(option),
                      value: option,
                      groupValue: _responses[
                          field.id], // Use _responses to track selection
                      onChanged: (value) {
                        setState(() {
                          _responses[field.id] = value;
                        });
                      },
                      activeColor: KStyle.cPrimaryColor,
                    ))
                .toList(),
          );
        }
        break;

      case 'checkbox':
        if (field.options != null && field.options!.isNotEmpty) {
          return Column(
            children: field.options!
                .map((option) => CheckboxListTile(
                      title: Text(option),
                      value: _responses[field.id]?.contains(option) ??
                          false, // Use _responses to track selection
                      onChanged: (value) {
                        setState(() {
                          if (value!) {
                            _responses[field.id] =
                                List<String>.from(_responses[field.id] ?? []);
                            _responses[field.id]!.add(option);
                          } else {
                            _responses[field.id] =
                                List<String>.from(_responses[field.id] ?? [])
                                    .where((item) => item != option)
                                    .toList();
                          }
                        });
                      },
                      activeColor: KStyle.cPrimaryColor,
                    ))
                .toList(),
          );
        }
        break;

      case 'dropdown':
        if (field.options != null && field.options!.isNotEmpty) {
          return DropdownButtonFormField<String>(
            decoration: InputDecoration(
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: BorderSide(
                  color: KStyle.cPrimaryColor,
                  width: 2,
                ),
              ),
            ),
            hint: Text(field.placeholder ?? 'Select an option'),
            items: field.options!
                .map((option) => DropdownMenuItem(
                      value: option,
                      child: Text(option),
                    ))
                .toList(),
            onChanged: (value) {
              setState(() {
                _responses[field.id] = value;
              });
            },
            validator: (value) {
              if (field.required && (value == null || value.isEmpty)) {
                return 'This field is required';
              }
              return null;
            },
          );
        }
        break;
    }

    // Default fallback
    return Text(
      'Input field for ${field.type}',
      style: KStyle.labelMdRegularTextStyle.copyWith(
        color: KStyle.c72GreyColor,
      ),
    );
  }
}
